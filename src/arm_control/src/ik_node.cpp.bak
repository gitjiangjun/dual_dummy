#include "rclcpp/rclcpp.hpp"
#include "arm_control/msg/ik_result.hpp"
#include "arm_control/msg/control_command.hpp"
#include "sensor_msgs/msg/joint_state.hpp"
#include<motionlib.h>
#include <Eigen/Dense>
#include <iostream>
#include <thread>
#include <sstream>
#include <kdl/chain.hpp>
#include <kdl/chainfksolverpos_recursive.hpp>
#include <kdl/chainiksolvervel_pinv.hpp>
#include <kdl/chainiksolverpos_nr.hpp>
#include <kdl/frames_io.hpp>
#include <kdl_parser/kdl_parser.hpp>
#include <urdf/model.h>

using namespace std;
using namespace rclcpp;
using namespace Eigen;
using namespace KDL;

class IKNode : public Node {
public:
    IKNode() : Node("ik_node") {
        // 获取参数
        std::string urdf_string = this->declare_parameter("robot_description", "");
        
        // 解析URDF
        urdf::Model model;
        if (!model.initString(urdf_string)) {
            RCLCPP_ERROR(this->get_logger(), "URDF parse failed");
            rclcpp::shutdown();
            return;
        }

        // 从URDF构建KDL树
        if (!kdl_parser::treeFromUrdfModel(model, kdl_tree_)) {
            RCLCPP_ERROR(this->get_logger(), "Failed to construct KDL tree from URDF");
            rclcpp::shutdown();
        }

        // 初始化发布器和订阅器
        ik_pub_ = this->create_publisher<arm_control::msg::IKResult>("ik_result", 10);
        cmd_pub_ = this->create_publisher<arm_control::msg::ControlCommand>("control_command", 10);
        joint_sub_ = this->create_subscription<sensor_msgs::msg::JointState>(
            "joint_states", 10, bind(&IKNode::joint_callback, this, std::placeholders::_1));
        
        RCLCPP_INFO(this->get_logger(), "IK node initialized. Enter commands:");
        RCLCPP_INFO(this->get_logger(), "  - Pose: pose [left/right] x y z rx ry rz");
        RCLCPP_INFO(this->get_logger(), "  - Gripper: gripper [left/right] [open/close]");
        RCLCPP_INFO(this->get_logger(), "  - Get Pose: get_pose [left/right]");
        
        // 启动终端输入线程
        thread input_thread(&IKNode::terminal_input, this);
        input_thread.detach();
    }

private:
    KDL::Tree kdl_tree_;
    VectorXd left_current = VectorXd::Zero(6);  // 6个关节
    VectorXd right_current = VectorXd::Zero(6); // 6个关节

    void joint_callback(const sensor_msgs::msg::JointState::SharedPtr msg) {
        // 更新当前关节角度
        for (size_t i = 0; i < msg->name.size(); i++) {
            if (msg->name[i] == "left_joint1") {
                for (int j = 0; j < 6; j++) left_current[j] = msg->position[i+j];
            } else if (msg->name[i] == "right_joint1") {
                for (int j = 0; j < 6; j++) right_current[j] = msg->position[i+j];
            }
        }
    }

    KDL::Frame convert_to_kdl_frame(const Matrix4d& pose) {
        KDL::Frame frame;
        // 设置位置
        frame.p.x(pose(0,3));
        frame.p.y(pose(1,3));
        frame.p.z(pose(2,3));
        
        // 设置旋转矩阵
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                frame.M(i,j) = pose(i,j);
            }
        }
        return frame;
    }

    Matrix4d pose_from_xyzrpy(double x, double y, double z, double rx, double ry, double rz) {
        Matrix4d T = Matrix4d::Identity();
        T.block<3,1>(0,3) << x, y, z;
        
        // RPY转旋转矩阵（ZYX顺序）
        AngleAxisd rz_rot(rz, Vector3d::UnitZ());
        AngleAxisd ry_rot(ry, Vector3d::UnitY());
        AngleAxisd rx_rot(rx, Vector3d::UnitX());
        T.block<3,3>(0,0) = (rz_rot * ry_rot * rx_rot).matrix();
        return T;
    }

    IKSolution solve_ik(const string& arm, const Matrix4d& target_pose, const VectorXd& initial_angles) {
        IKSolution result;
        result.success = false;
        result.angles.resize(6); // 固定为6个关节
        
        try {
            // 获取运动学链
            KDL::Chain chain;
            string base_link = arm + "_base_link";
            string tip_link = arm + "_link6_1";
            
            if (!kdl_tree_.getChain("base_plate", tip_link, chain)) {
                RCLCPP_ERROR(this->get_logger(), "Failed to get KDL chain for %s arm", arm.c_str());
                return result;
            }

            // 检查关节数量是否为6
            if (chain.getNrOfJoints() != 6) {
                RCLCPP_ERROR(this->get_logger(), "Chain for %s arm has %d joints (expected 6)", 
                           arm.c_str(), chain.getNrOfJoints());
                return result;
            }

            // 创建求解器
            ChainFkSolverPos_recursive fk_solver(chain);
            ChainIkSolverVel_pinv vel_ik_solver(chain);
            ChainIkSolverPos_NR ik_solver(chain, fk_solver, vel_ik_solver, 100, 1e-6);

            // 设置初始关节位置
            KDL::JntArray q_init(chain.getNrOfJoints());
            for (size_t i = 0; i < chain.getNrOfJoints(); i++) {
                q_init(i) = initial_angles[i];
            }

            // 转换目标位姿到KDL格式
            KDL::Frame target_frame = convert_to_kdl_frame(target_pose);

            // 求解逆运动学
            KDL::JntArray q_out(chain.getNrOfJoints());
            int ret = ik_solver.CartToJnt(q_init, target_frame, q_out);
            
            if (ret >= 0) {
                result.success = true;
                for (size_t i = 0; i < 6; i++) {
                    result.angles[i] = q_out(i);
                }
            } else {
                RCLCPP_WARN(this->get_logger(), "IK solver failed with error code: %d", ret);
            }
        } catch (const exception& e) {
            RCLCPP_ERROR(this->get_logger(), "IK solver exception: %s", e.what());
        }
        
        return result;
    }

    KDL::Frame getCurrentEndEffectorPose(const string& arm) {
        KDL::Chain chain;
        string base_link = arm + "_base_link";
        string tip_link = arm + "_link6_1";
        
        if (!kdl_tree_.getChain("base_plate", tip_link, chain)) {
            RCLCPP_ERROR(this->get_logger(), "Failed to get KDL chain for %s arm", arm.c_str());
            return KDL::Frame();
        }

        ChainFkSolverPos_recursive fk_solver(chain);
        KDL::JntArray q(chain.getNrOfJoints());
        VectorXd current_angles = (arm == "left") ? left_current : right_current;
        for (size_t i = 0; i < chain.getNrOfJoints(); i++) {
            q(i) = current_angles[i];
        }

        KDL::Frame pose;
        int ret = fk_solver.JntToCart(q, pose);
        if (ret < 0) {
            RCLCPP_ERROR(this->get_logger(), "Forward kinematics solver failed for %s arm", arm.c_str());
        }
        return pose;
    }

    void terminal_input() {
        string line;
        while (rclcpp::ok() && getline(cin, line)) {
            istringstream iss(line);
            string cmd_type, arm;
            
            if (!(iss >> cmd_type)) {
                RCLCPP_WARN(this->get_logger(), "Invalid command. See help.");
                continue;
            }
            
            if (cmd_type == "pose") {
                // 处理位姿命令
                double x, y, z, rx, ry, rz;
                if (!(iss >> arm >> x >> y >> z >> rx >> ry >> rz)) {
                    RCLCPP_WARN(this->get_logger(), "Invalid pose format. Use: pose [left/right] x y z rx ry rz");
                    continue;
                }
                
                // 构建目标位姿
                Matrix4d target_pose = pose_from_xyzrpy(x, y, z, rx, ry, rz);
                VectorXd initial_angles = (arm == "left") ? left_current : right_current;
                
                // 调用逆运动学求解
                IKSolution sol = solve_ik(arm, target_pose, initial_angles);
                
                // 发布结果
                auto msg = arm_control::msg::IKResult();
                msg.arm_name = arm + "_arm";
                msg.success = sol.success;
                if (sol.success) {
                    msg.joint_angles.resize(6);
                    for (int i = 0; i < 6; i++) {
                        msg.joint_angles[i] = sol.angles[i];
                    }
                    RCLCPP_INFO(this->get_logger(), "IK solved for %s: [%.2f, %.2f, %.2f, %.2f, %.2f, %.2f]", 
                              arm.c_str(), sol.angles[0], sol.angles[1], sol.angles[2],
                              sol.angles[3], sol.angles[4], sol.angles[5]);
                } else {
                    RCLCPP_WARN(this->get_logger(), "IK failed for %s", arm.c_str());
                }
                ik_pub_->publish(msg);
                
            } else if (cmd_type == "gripper") {
                // 处理夹爪命令
                string state;
                if (!(iss >> arm >> state) || (state != "open" && state != "close")) {
                    RCLCPP_WARN(this->get_logger(), "Invalid gripper format. Use: gripper [left/right] [open/close]");
                    continue;
                }
                
                // 发布夹爪控制命令
                auto msg = arm_control::msg::ControlCommand();
                msg.arm_name = arm + "_arm";
                msg.command_type = "gripper";
                msg.gripper_state = state;
                cmd_pub_->publish(msg);
                RCLCPP_INFO(this->get_logger(), "Sending gripper command: %s %s", arm.c_str(), state.c_str());
                
            } else if (cmd_type == "get_pose") {
                if (!(iss >> arm) || (arm != "left" && arm != "right")) {
                    RCLCPP_WARN(this->get_logger(), "Invalid get_pose format. Use: get_pose [left/right]");
                    continue;
                }
                KDL::Frame pose = getCurrentEndEffectorPose(arm);
                RCLCPP_INFO(this->get_logger(), "Current end effector pose for %s arm:", arm.c_str());
                RCLCPP_INFO(this->get_logger(), "Position: [%.2f, %.2f, %.2f]", pose.p.x(), pose.p.y(), pose.p.z());
                RCLCPP_INFO(this->get_logger(), "Rotation matrix:");
                for (int i = 0; i < 3; ++i) {
                    RCLCPP_INFO(this->get_logger(), "  [%.2f, %.2f, %.2f]", pose.M(i, 0), pose.M(i, 1), pose.M(i, 2));
                }
            } else if (cmd_type == "help") {
                RCLCPP_INFO(this->get_logger(), "Available commands:");
                RCLCPP_INFO(this->get_logger(), "  pose [left/right] x y z rx ry rz");
                RCLCPP_INFO(this->get_logger(), "  gripper [left/right] [open/close]");
                RCLCPP_INFO(this->get_logger(), "  get_pose [left/right]");
                RCLCPP_INFO(this->get_logger(), "  help");
                
            } else {
                RCLCPP_WARN(this->get_logger(), "Unknown command: %s. Type 'help' for usage.", cmd_type.c_str());
            }
        }
    }

    Publisher<arm_control::msg::IKResult>::SharedPtr ik_pub_;
    Publisher<arm_control::msg::ControlCommand>::SharedPtr cmd_pub_;
    Subscription<sensor_msgs::msg::JointState>::SharedPtr joint_sub_;
};

int main(int argc, char * argv[]) {
    rclcpp::init(argc, argv);
    rclcpp::spin(make_shared<IKNode>());
    rclcpp::shutdown();
    return 0;
}